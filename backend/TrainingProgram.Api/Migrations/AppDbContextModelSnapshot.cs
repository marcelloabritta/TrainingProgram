// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingProgram.Api.Data;

#nullable disable

namespace TrainingProgram.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainingProgram.Api.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TrainingSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.Macrocycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Macrocycles");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.Microcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MacrocycleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MacrocycleId");

                    b.ToTable("Microcycles");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MicrocycleId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("MicrocycleId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.Activity", b =>
                {
                    b.HasOne("TrainingProgram.Api.Models.TrainingSession", "TrainingSession")
                        .WithMany("Activities")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingSession");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.Microcycle", b =>
                {
                    b.HasOne("TrainingProgram.Api.Models.Macrocycle", "Macrocycle")
                        .WithMany("Microcycles")
                        .HasForeignKey("MacrocycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Macrocycle");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.TrainingSession", b =>
                {
                    b.HasOne("TrainingProgram.Api.Models.Microcycle", "Microcycle")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("MicrocycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Microcycle");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.Macrocycle", b =>
                {
                    b.Navigation("Microcycles");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.Microcycle", b =>
                {
                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("TrainingProgram.Api.Models.TrainingSession", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
